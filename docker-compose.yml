services:
  mongo1:
    image: mongo:${MONGO_VERSION}
    container_name: mongo1
    command: ["mongod", "--replSet", "rs0", "--bind_ip_all"]
    ports:
      - "27017:27017"
    volumes:
      - mongo1_data:/data/db
    networks:
      - mongo-cluster
    mem_limit: ${MONGO_MEMORY}
    cpus: ${MONGO_CPU}

  mongo2:
    image: mongo:${MONGO_VERSION}
    container_name: mongo2
    command: ["mongod", "--replSet", "rs0", "--bind_ip_all"]
    ports:
      - "27018:27017"
    volumes:
      - mongo2_data:/data/db
    networks:
      - mongo-cluster
    mem_limit: ${MONGO_MEMORY}
    cpus: ${MONGO_CPU}

  mongo-arbiter:
    image: mongo:${MONGO_VERSION}
    container_name: mongo-arbiter
    command: ["mongod", "--replSet", "rs0", "--bind_ip_all"]
    ports:
      - "27019:27017"
    volumes:
      - mongo_arbiter_data:/data/db
    networks:
      - mongo-cluster
    mem_limit: ${MONGO_MEMORY}
    cpus: ${MONGO_CPU}

  mongo-setup:
    image: mongo:${MONGO_VERSION}
    container_name: mongo-setup
    depends_on:
      - mongo1
      - mongo2
      - mongo-arbiter
    restart: "no"
    entrypoint: >
      bash -c "
      echo 'Waiting for MongoDB to start...' &&
      until mongosh --host mongo1:27017 --eval 'db.runCommand({ ping: 1 })' >/dev/null 2>&1; do
        echo 'mongo1 not ready, sleeping...'; sleep 3;
      done &&
      echo 'Configuring replica set...' &&
      mongosh --host mongo1:27017 <<'EOF'
        try {
          rs.initiate({
            _id: 'rs0',
            members: [
              { _id: 0, host: 'mongo1:27017', priority: 2 },
              { _id: 1, host: 'mongo2:27017', priority: 1 },
              { _id: 2, host: 'mongo-arbiter:27017', arbiterOnly: true }
            ]
          });
        } catch(e) {
          print('Replica set already initiated or error: ' + e);
        }
        try { rs.status(); } catch(e) { print(e); }
      EOF
      "
    networks:
      - mongo-cluster
    mem_limit: ${MONGO_SETUP_MEMORY}
    cpus: ${MONGO_SETUP_CPU}

  mongo-express:
    image: mongo-express:${MONGO_EXPRESS_VERSION}
    container_name: mongo-express
    ports:
      - "8081:8081"
    environment:
      ME_CONFIG_MONGODB_URL: mongodb://mongo1:27017,mongo2:27017/?replicaSet=rs0
      ME_CONFIG_BASICAUTH_USERNAME: ${MONGO_EXPRESS_USER}
      ME_CONFIG_BASICAUTH_PASSWORD: ${MONGO_EXPRESS_PASS}
      ME_CONFIG_MONGODB_ENABLE_ADMIN: "true"
    depends_on:
      - mongo1
      - mongo2
      - mongo-arbiter
    networks:
      - mongo-cluster
    mem_limit: ${MONGO_EXPRESS_MEMORY}
    cpus: ${MONGO_EXPRESS_CPU}

  nginx:
    image: nginx:${NGINX_VERSION}
    container_name: nginx
    depends_on:
      - mongo-express
    ports:
      - "8080:80"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./html:/usr/share/nginx/html:ro
    networks:
      - mongo-cluster
    mem_limit: ${NGINX_MEMORY}
    cpus: ${NGINX_CPU}

networks:
  mongo-cluster:

volumes:
  mongo1_data:
  mongo2_data:
  mongo_arbiter_data:
